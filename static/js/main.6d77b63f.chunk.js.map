{"version":3,"sources":["theme.js","reducers/index.js","components/Home/index.js","components/App/index.js","serviceWorker.js","index.js","components/Home/index.module.css"],"names":["createMuiTheme","typography","useNextVariants","palette","primary","main","contrastText","secondary","combineReducers","Home","react_default","a","createElement","className","styles","container","connect","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","history","createBrowserHistory","middleware","routerMiddleware","thunkMiddleware","store","createStore","Object","assign","rootReducer","router","connectRouter","compose","applyMiddleware","apply","ReactDOM","render","es","esm","theme","components_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"mNAEeA,2BAAe,CAC5BC,WAAY,CACVC,iBAAiB,GAEnBC,QAAS,CACPC,QAAS,CACPC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTF,KAAM,UACNC,aAAc,WCXLE,cAAgB,6BCQhBC,MAPf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOC,aCQZC,oBARf,WACE,OACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,OCIjCY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,gBChF3DC,EAAUC,YAAqB,IAE/BC,EAAa,CACjBC,YAAiBH,GACjBI,KAWIC,EAAQC,YACZ7C,YACE8C,OAAOC,OAAO,GAAIC,EAAa,CAC7BC,OAAQC,YAAcX,MAG1BY,YAAQC,IAAeC,WAAf,EAAmBZ,KAG7Ba,IAASC,OACPrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAUZ,MAAOA,GACf1C,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAiBlB,QAASA,GACxBrC,EAAAC,EAAAC,cAACE,EAAA,iBAAD,CAAkBoD,MAAOA,GACvBxD,EAAAC,EAAAC,cAACuD,EAAD,SAINC,SAASC,eAAe,SD1BnB,SAAkBxC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIwC,IAAIC,GAAwBhD,OAAOC,SAASgD,MACpDC,SAAWlD,OAAOC,SAASiD,OAIvC,OAGFlD,OAAOmD,iBAAiB,OAAQ,WAC9B,IAAM9C,EAAK,GAAA+C,OAAMJ,GAAN,sBAEPlD,GAgEV,SAAiCO,EAAOC,GAEtC+C,MAAMhD,GACHK,KAAK,SAAA4C,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CpD,UAAUC,cAAcoD,MAAMlD,KAAK,SAAAC,GACjCA,EAAakD,aAAanD,KAAK,WAC7BV,OAAOC,SAAS6D,aAKpB1D,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFA4C,CAAwB1D,EAAOC,GAI/BC,UAAUC,cAAcoD,MAAMlD,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MCC/BE,uBClDAwD,EAAAC,QAAA,CAAkBzE,UAAA","file":"static/js/main.6d77b63f.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nexport default createMuiTheme({\n  typography: {\n    useNextVariants: true,\n  },\n  palette: {\n    primary: {\n      main: '#ffcc33',\n      contrastText: '#fff',\n    },\n    secondary: {\n      main: '#ffb347',\n      contrastText: '#fff',\n    },\n  },\n});\n","import { combineReducers } from 'redux';\n\nexport default combineReducers({});\n","import React from 'react';\nimport styles from './index.module.css';\n\nfunction Home() {\n  return (\n    <div className={styles.container}>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router';\nimport Home from '../Home';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n    </Switch>\n  );\n}\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history'\nimport { applyMiddleware, compose, combineReducers,createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\nimport thunkMiddleware from 'redux-thunk';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\nimport theme from './theme';\nimport rootReducer from './reducers';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst history = createBrowserHistory({});\n\nconst middleware = [\n  routerMiddleware(history),\n  thunkMiddleware,\n];\n\nif (process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger');\n\n  middleware.push(\n    createLogger({ collapsed: true })\n  );\n}\n\nconst store = createStore(\n  combineReducers(\n    Object.assign({}, rootReducer, {\n      router: connectRouter(history),\n    })\n  ),\n  compose(applyMiddleware(...middleware))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <MuiThemeProvider theme={theme}>\n        <App />\n      </MuiThemeProvider>\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__3VlUm\"};"],"sourceRoot":""}